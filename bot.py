
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
import httpx

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚úçÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è")],
    [KeyboardButton(text="üí¨ –°–ª–æ–≥–∞–Ω—ã")],
    [KeyboardButton(text="üì¶ –û–ø–∏—Å–∞–Ω–∏—è")],
    [KeyboardButton(text="üç∑ –¢–æ—Å—Ç / –¶–∏—Ç–∞—Ç–∞")]
], resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º—ã –≥–æ—Ç–æ–≤—ã –≤–∞–º –ø–æ–º–æ—á—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –≤—Å–µ–≥–æ –∑–∞ –ø–æ–ª—á–∞—à–∫–∏ –∫–æ—Ñ–µ!", reply_markup=menu)

@dp.message(F.text.in_({"‚úçÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è", "üí¨ –°–ª–æ–≥–∞–Ω—ã", "üì¶ –û–ø–∏—Å–∞–Ω–∏—è", "üç∑ –¢–æ—Å—Ç / –¶–∏—Ç–∞—Ç–∞"}))
async def ask_topic(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")

@dp.message()
async def generate(message: Message, state: FSMContext):
    data = await state.get_data()
    type_ = data.get("type")
    if not type_:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é.")
        return

    prompt = {
        "‚úçÔ∏è –ù–∞–∑–≤–∞–Ω–∏—è": f"–ü—Ä–∏–¥—É–º–∞–π 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —Ç–µ–º—É: {message.text}",
        "üí¨ –°–ª–æ–≥–∞–Ω—ã": f"–ü—Ä–∏–¥—É–º–∞–π 3 —Å–ª–æ–≥–∞–Ω–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ —Ç–µ–º—É: {message.text}",
        "üì¶ –û–ø–∏—Å–∞–Ω–∏—è": f"–ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –Ω–∞ —Ç–µ–º—É: {message.text}",
        "üç∑ –¢–æ—Å—Ç / –¶–∏—Ç–∞—Ç–∞": f"–ü—Ä–∏–¥—É–º–∞–π —Ç–æ—Å—Ç –∏–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ü–∏—Ç–∞—Ç—É –Ω–∞ —Ç–µ–º—É: {message.text}",
    }.get(type_, message.text)

    try:
        response = await httpx.AsyncClient().post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "openrouter/cinematika-7b",
                "messages": [
                    {"role": "user", "content": prompt}
                ]
            }
        )
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        await message.answer(content)
    except Exception as e:
        logging.exception(e)
        await message.answer("üîπ ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    dp.run_polling(bot)
